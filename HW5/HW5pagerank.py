import numpy as npimport pagerank as prdef pr_matrix(fname, alpha):    """this code does not work because of a demensionality error I cannot correct     in how my matrix engages with the pr.ranking function """       dicts=pr.read_graph_file(fname)    N = dicts[1]    P= [[0 for i in range(N)] for i in range(N)]    for key,value in dicts[0].items():        for i in value:            P[key][i]= 1/len(value)    P = np.matrix(P)    M = (alpha)*P.transpose() + ((1-alpha)/N)*np.ones([N,N])                                                   return Mdef node_rank(fname,alpha):    dicts=pr.read_graph_file(fname)    M = pr_matrix(fname,alpha)    rank = pr.ranking(M)    act_rank=[]    for i in range(len(rank)): # .append the # of the node for tracking        rank[i].append(i)    rank.sort()    for i in rank:# just keep ranking        rank[i][0].pop()    for i in rank:        name=dicts[2][i]        act_rank.append(name)    return act_rank    #b (optional)"""essentially the value is stored in 'data' then the    r,c value sores the location. for example   data[2]=4,r[2]=1, c[2]=10. so the value in the 11th space in the    3rd row is 2! """def sparse_mker(fname):    adj,n,name=pr.read_graph_file(fname)    data=[]    r=[]    c=[]    a_sparse=(data,(r,c))    for key,value in adj.items():        for i in value:            data.append(1/len(value))            a_sparse[1][0].append(i)            a_sparse[1][1].append(key)    return a_sparsedef node_rank_part_c(ranking):    dicts=pr.read_graph_file(fname)    rank = ranking    act_rank=[]    for i in range(len(rank)): # .append the # of the node for tracking        rank[i].append(i)    rank.sort()    for i in rank:# just keep ranking        rank[i][0].pop()    for i in rank:        name=dicts[2][i]        act_rank.append(name)    return act_rank    def ranking_sparse(fname,alpha,steps=100):    sparse = sparse_mker(fname)    ranking = pr.ranking_sparse(sparse,alpha,steps)    act_rank = node_rank_part_c(ranking)    top_5 = act_rank[0:5]    return top_5     if __name__ == "__main__":    a = ranking_sparse("/Users/marazzanocolon/Desktop/california.txt", .95)    print(a)